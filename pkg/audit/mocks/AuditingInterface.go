// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "github.com/olivere/elastic/config"
import context "context"
import elastic "github.com/olivere/elastic"
import mock "github.com/stretchr/testify/mock"

// AuditingInterface is an autogenerated mock type for the AuditingInterface type
type AuditingInterface struct {
	mock.Mock
}

// DoAudit provides a mock function with given fields: ctx, client, username, operation, values
func (_m *AuditingInterface) DoAudit(ctx context.Context, client *elastic.Client, username string, operation string, values map[string]string) {
	_m.Called(ctx, client, username, operation, values)
}

// ElkClient provides a mock function with given fields: url, username, password
func (_m *AuditingInterface) ElkClient(url string, username string, password string) (*elastic.Client, error) {
	ret := _m.Called(url, username, password)

	var r0 *elastic.Client
	if rf, ok := ret.Get(0).(func(string, string, string) *elastic.Client); ok {
		r0 = rf(url, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(url, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newClient provides a mock function with given fields: _a0
func (_m *AuditingInterface) newClient(_a0 *config.Config) (*elastic.Client, error) {
	ret := _m.Called(_a0)

	var r0 *elastic.Client
	if rf, ok := ret.Get(0).(func(*config.Config) *elastic.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*config.Config) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
