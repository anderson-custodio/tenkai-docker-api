// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/softplan/tenkai-docker-api/pkg/dbms/model"
	"github.com/stretchr/testify/mock"
)

// EnvironmentDAOInterface is an autogenerated mock type for the EnvironmentDAOInterface type
type EnvironmentDAOInterface struct {
	mock.Mock
}

// CreateEnvironment provides a mock function with given fields: env
func (_m *EnvironmentDAOInterface) CreateEnvironment(env model.Environment) (int, error) {
	ret := _m.Called(env)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.Environment) int); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Environment) error); ok {
		r1 = rf(env)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: env
func (_m *EnvironmentDAOInterface) DeleteEnvironment(env model.Environment) error {
	ret := _m.Called(env)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Environment) error); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditEnvironment provides a mock function with given fields: env
func (_m *EnvironmentDAOInterface) EditEnvironment(env model.Environment) error {
	ret := _m.Called(env)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Environment) error); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEnvironments provides a mock function with given fields: principal
func (_m *EnvironmentDAOInterface) GetAllEnvironments(principal string) ([]model.Environment, error) {
	ret := _m.Called(principal)

	var r0 []model.Environment
	if rf, ok := ret.Get(0).(func(string) []model.Environment); ok {
		r0 = rf(principal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: envID
func (_m *EnvironmentDAOInterface) GetByID(envID int) (*model.Environment, error) {
	ret := _m.Called(envID)

	var r0 *model.Environment
	if rf, ok := ret.Get(0).(func(int) *model.Environment); ok {
		r0 = rf(envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(envID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
