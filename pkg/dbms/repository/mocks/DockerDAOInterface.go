// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/softplan/tenkai-docker-api/pkg/dbms/model"
	"github.com/stretchr/testify/mock"
)

// DockerDAOInterface is an autogenerated mock type for the DockerDAOInterface type
type DockerDAOInterface struct {
	mock.Mock
}

// CreateDockerRepo provides a mock function with given fields: item
func (_m *DockerDAOInterface) CreateDockerRepo(item model.DockerRepo) (int, error) {
	ret := _m.Called(item)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.DockerRepo) int); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DockerRepo) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDockerRepo provides a mock function with given fields: id
func (_m *DockerDAOInterface) DeleteDockerRepo(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDockerRepositoryByHost provides a mock function with given fields: host
func (_m *DockerDAOInterface) GetDockerRepositoryByHost(host string) (model.DockerRepo, error) {
	ret := _m.Called(host)

	var r0 model.DockerRepo
	if rf, ok := ret.Get(0).(func(string) model.DockerRepo); ok {
		r0 = rf(host)
	} else {
		r0 = ret.Get(0).(model.DockerRepo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDockerRepos provides a mock function with given fields:
func (_m *DockerDAOInterface) ListDockerRepos() ([]model.DockerRepo, error) {
	ret := _m.Called()

	var r0 []model.DockerRepo
	if rf, ok := ret.Get(0).(func() []model.DockerRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DockerRepo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
