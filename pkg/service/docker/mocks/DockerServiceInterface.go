// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/softplan/tenkai-docker-api/pkg/dbms/model"
	repository "github.com/softplan/tenkai-docker-api/pkg/dbms/repository"
	mock "github.com/stretchr/testify/mock"

	sync "sync"

	time "time"
)

// DockerServiceInterface is an autogenerated mock type for the DockerServiceInterface type
type DockerServiceInterface struct {
	mock.Mock
}

// GetDate provides a mock function with given fields: repo, imageName, tag
func (_m *DockerServiceInterface) GetDate(repo model.DockerRepo, imageName string, tag string) (*time.Time, error) {
	ret := _m.Called(repo, imageName, tag)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(model.DockerRepo, string, string) *time.Time); ok {
		r0 = rf(repo, imageName, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DockerRepo, string, string) error); ok {
		r1 = rf(repo, imageName, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDateCalledTimes provides a mock function with given fields:
func (_m *DockerServiceInterface) GetDateCalledTimes() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetDockerTagsWithDate provides a mock function with given fields: payload, dao, globalCache
func (_m *DockerServiceInterface) GetDockerTagsWithDate(payload model.ListDockerTagsRequest, dao repository.DockerDAOInterface, globalCache *sync.Map) (*model.ListDockerTagsResult, error) {
	ret := _m.Called(payload, dao, globalCache)

	var r0 *model.ListDockerTagsResult
	if rf, ok := ret.Get(0).(func(model.ListDockerTagsRequest, repository.DockerDAOInterface, *sync.Map) *model.ListDockerTagsResult); ok {
		r0 = rf(payload, dao, globalCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListDockerTagsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ListDockerTagsRequest, repository.DockerDAOInterface, *sync.Map) error); ok {
		r1 = rf(payload, dao, globalCache)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: repo, imageName
func (_m *DockerServiceInterface) GetTags(repo *model.DockerRepo, imageName string) (*model.TagsResult, error) {
	ret := _m.Called(repo, imageName)

	var r0 *model.TagsResult
	if rf, ok := ret.Get(0).(func(*model.DockerRepo, string) *model.TagsResult); ok {
		r0 = rf(repo, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TagsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.DockerRepo, string) error); ok {
		r1 = rf(repo, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
